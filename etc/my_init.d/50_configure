#!/bin/sh

# URL for the primary database, in the format expected by sqlalchemy (required
# unless linked to a container called 'db')
: ${DATABASE_URL:=}
# URL for solr (required unless linked to a container called 'solr')
: ${SOLR_URL:=}
# URL for redis (required unless linked to a container called 'redis')
: ${REDIS_URL:=}
# Email to which errors should be sent (optional, default: none)
: ${ERROR_EMAIL:=}

set -eu

# Configure postfix
echo ${SITE_HOST} > /etc/hostname
echo ${SITE_HOST} > /etc/mailname
service postfix restart
service postfix reload

# Add an extra user to datastore DB
export x=""
if [ -z ${DB_ENV_DATASTORE_PASS+x} ]; then
  echo "Not creating user because DB_ENV_DATASTORE_PASS not set or empty; assuming user is already there...";
else
  PGPASSWORD="$DB_ENV_DATASTORE_PASS" PGHOST="$DB_ENV_DATASTORE_HOST" PGUSER="$DB_ENV_DATASTORE_USER" createuser -S -D -R -l datastore_ro || echo "Command failed; user probably already exists";
  echo ALTER ROLE "$DB_ENV_DATASTORE_RO_USER" WITH PASSWORD "'$DB_ENV_DATASTORE_RO_PASS'" | psql "${DATASTORE_DB_URL}"
fi

CONFIG="${CKAN_CONFIG}/ckan.ini"

abort () {
  echo "$@" >&2
  exit 1
}

write_config () {
  if [ ! -e "$CONFIG" ]; then
    "$CKAN_HOME"/bin/paster make-config ckan "$CONFIG"
  fi

  "$CKAN_HOME"/bin/paster --plugin=ckan config-tool "$CONFIG" \
      "sqlalchemy.url = ${DATABASE_URL}" \
      "solr_url = ${SOLR_URL}" \
      "ckan.storage_path = /var/lib/ckan" \
      "email_to = disabled@example.com" \
      "error_email_from = ckan@$(hostname -f)" \
      "ckan.site_url = ${SITE_SCHEME}${SITE_HOST}" \
      "ckan.redis.url = ${REDIS_URL}" \
      "ckan.datastore.write_url = $DATASTORE_DB_URL" \
      "ckan.datastore.read_url = $DATASTORE_DB_RO_URL" \
      "ckan.datapusher.url = $DATAPUSHER_URL" \
      "ckan.favicon = https://resourcegovernance.org/sites/default/files/favicon.ico"

  # Print error reports to the error stream to be shown in the console
  "$CKAN_HOME"/bin/paster --plugin=ckan config-tool -s DEFAULT "$CONFIG"\
      "show_exceptions_in_wsgi_errors = true"

  if [ -n "$ERROR_EMAIL" ]; then
    sed -i -e "s&^#email_to.*&email_to = ${ERROR_EMAIL}&" "$CONFIG"
  fi
}

link_postgres_url () {
  local user=$DB_ENV_POSTGRES_USER
  local pass=$DB_ENV_POSTGRES_PASS
  local db=$DB_ENV_POSTGRES_DB
  local host=$DB_PORT_5432_TCP_ADDR
  local port=$DB_PORT_5432_TCP_PORT
  echo "postgresql://${user}:${pass}@${host}:${port}/${db}"
}

link_solr_url () {
  local host=$SOLR_PORT_8983_TCP_ADDR
  local port=$SOLR_PORT_8983_TCP_PORT
  echo "http://${host}:${port}/solr/ckan"
}

link_redis_url () {
  local host=$REDIS_PORT_6379_TCP_ADDR
  local port=$REDIS_PORT_6379_TCP_PORT
  local db_no=$REDIS_DB_NO
  echo "redis://${host}:${port}/${REDIS_DB_NO}"
}

# If we don't already have a config file, bootstrap
if [ -z "$DATABASE_URL" ]; then
  if ! DATABASE_URL=$(link_postgres_url); then
    abort "no DATABASE_URL specified and linked container called 'db' was not found"
  fi
fi
if [ -z "$SOLR_URL" ]; then
  if ! SOLR_URL=$(link_solr_url); then
    abort "no SOLR_URL specified and linked container called 'solr' was not found"
  fi
fi
if [ -z "$REDIS_URL" ]; then
  if ! REDIS_URL=$(link_redis_url); then
    abort "no REDIS_URL specified and linked container called 'redis' was not found"
  fi
fi

  write_config
