daemon off;
user www-data;
worker_processes 1;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable "msie6";

    # Unless these are set explicitly, the types_hash_bucket_size is set at
    # runtime depending on the processor's cache line size, which can (and does)
    # cause inconsistent behaviour on different hardware. Our
    # /etc/nginx/mime.types requires at least a 32 bit bucket, but we set these to
    # the latest nginx default values to be on the safe size.
    types_hash_bucket_size 64;
    types_hash_max_size 1024;

    proxy_cache_path /var/cache/nginx/proxycache levels=1:2 keys_zone=cache:30m max_size=250m;
    proxy_temp_path /var/cache/nginx/proxytemp 1 2;

    # Redirect resourcedata.org to www.resourcedata.org
    server {
        listen 80;
        server_name resourcedata.org;
        return 301 https://www.resourcedata.org$request_uri;
    }

    server {
        listen 80 default_server;
        server_name _;

        add_header Access-Control-Allow-Origin *;

        client_max_body_size 100M;

        # Special, somewhat redundant location to always proxy
        # the health check to the upstream server, without checking
        # if the request came in over HTTP or HTTPS.
        location /health_check {
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_next_upstream error;
            proxy_pass http://127.0.0.1:8080/;
            break;
        }

        location / {
            #  Any request that did not originally come in to the ELB
            # over HTTPS gets redirected.
            if ($http_x_forwarded_proto != "https") {
                return 301 https://$host$request_uri;
            }

            proxy_pass http://127.0.0.1:8080/;

            # Keep headers set by AWS ELB.
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header Host $host;
            proxy_cache cache;
            proxy_cache_bypass $cookie_auth_tkt;
            proxy_no_cache $cookie_auth_tkt;
            proxy_cache_valid 30m;
            proxy_cache_key $host$scheme$proxy_host$request_uri;
        }
    }
}
